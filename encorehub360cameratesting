require(game.Players.LocalPlayer.PlayerScripts.PlayerModule.CameraModule) -- We need some stuff from here.

-- Locals
local ContextActionService = game:GetService("ContextActionService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local ModdedCamera = {}

function ModdedCamera.new() -- Setup our custom camera
local self = setmetatable(
{},
{
__index = function(self, Index)
if ModdedCamera[Index] then
return ModdedCamera[Index]
end
end
}
)

self.CurrentCamera = game.Workspace.CurrentCamera -- Get current camera
self.Character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait() -- Get Player

-- Our offsets
self.X = 0
self.Y = 0

self.Sensitivity = 0.015 -- Change camera Sensitivity (You can make it smoother)
self.CameraOffset = Vector3.new(0, 3, 12)

-- Toggle handle
self.IsRightMouseButtonDown = false

self:Initialize()

return self
end

function ModdedCamera:Initialize()
self.CurrentCamera.CameraType = Enum.CameraType.Scriptable

ContextActionService:BindAction(
"RightClickChanged",

function(ActionName, InputState, InputObject)
self:RightClickChanged(ActionName, InputState, InputObject)
end,

false,
Enum.UserInputType.MouseButton2
)

ContextActionService:BindAction(
"UpdateAngles",

function(ActionName, InputState, InputObject)
self:UpdateAngles(ActionName, InputState, InputObject)
end,

false,
Enum.UserInputType.MouseMovement
)

RunService:BindToRenderStep("UpdateCamera", 200, function()
self:UpdateCamera()
end)
end

-- Bind our right click
function ModdedCamera:RightClickChanged(ActionName, InputState, InputObject)
if InputState == Enum.UserInputState.Begin then
IsRightMouseButtonDown = true
elseif InputState == Enum.UserInputState.End then
IsRightMouseButtonDown = false
end
end

-- Update Angles function
function ModdedCamera:UpdateAngles(ActionName, InputState, InputObject)
if IsRightMouseButtonDown then
UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition

self.X = self.X + (InputObject.Delta.X * -self.Sensitivity)
self.Y = self.Y + (InputObject.Delta.Y * -self.Sensitivity)
else
UserInputService.MouseBehavior = Enum.MouseBehavior.Default
end
end

-- Update function
function ModdedCamera:UpdateCamera()
self.CurrentCamera.CFrame = CFrame.new(self.Character.HumanoidRootPart.Position) * CFrame.fromEulerAnglesXYZ(0, self.X, 0) * CFrame.fromEulerAnglesXYZ(self.Y, 0, 0) * CFrame.new(self.CameraOffset.X, self.CameraOffset.Y, self.CameraOffset.Z)

local CameraRay = Ray.new(self.Character.HumanoidRootPart.Position, self.CurrentCamera.CFrame.Position - self.Character.HumanoidRootPart.Position)
local Ignore = {self.Character}

local HitPart, HitPosition = game.Workspace:FindPartOnRayWithIgnoreList(CameraRay, Ignore)

self.CurrentCamera.CFrame = (self.CurrentCamera.CFrame - (self.CurrentCamera.CFrame.Position - HitPosition)) + (self.Character.HumanoidRootPart.Position - self.CurrentCamera.CFrame.Position).Unit
self.CurrentCamera.Focus = self.CurrentCamera.CFrame
end

return ModdedCamera.new()
